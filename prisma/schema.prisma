// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int  @id @default(autoincrement())
  username String @db.VarChar(100)
  password String @db.VarChar(100)
  name String @db.VarChar(100)
  token String? @db.VarChar(100)
  isLogin Boolean? @db.Boolean()
  roleId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Roles @relation(fields: [roleId], references: [id])

  article Article[]
  category ArticleCategory[]
  comment ArticleComments[]
  @@map("users")
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId Int

  user    User      @relation(fields: [authorId], references: [id])
  categories ArticleCategory @relation(fields: [categoryId], references: [id])

  @@map("article")
}

model ArticleCategory {
  id Int @id @default(autoincrement())
  category String @db.VarChar(100)
  createdId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  article Article[]
  user User @relation(fields: [createdId], references: [id])

  @@map("articleCategory")
}

model ArticleComments {
  id Int @id @default(autoincrement())
  commentId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [commentId], references: [id])
  @@map("articleComment")
}

model Roles {
  id Int @id @default(autoincrement())
  role String @db.VarChar(50)
  user User[]
}